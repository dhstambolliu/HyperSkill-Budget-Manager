type: edu
custom_name: stage4
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n1000\n2\n" +
                        "1\nAlmond 250g\n35.43\n" +
                        "1\nMilk\n3.50\n" +
                        "1\nRed Fuji Apple\n5.99\n" +
                        "1\nEggs\n3.99\n" +
                        "1\nFIJI Natural Artesian Water\n25.98\n" +
                        "1\nHershey's milk chocolate bars\n8.54\n" +
                        "1\nGreat Value Broccoli Florets\n1.00\n" +
                        "1\nKeystone Ground Bee\n6.28\n" +
                        "2\nGildan LT\n8.61\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                        "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                        "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                        "3\nCinema\n8.73\n" +
                        "3\nSkate rental\n30\n" +
                        "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                        "4\nChick-fil-A $10 Gift Card\n10\n" +
                        "4\nDebt\n3.50\n" +
                        "5\n5\n0").setCheckFunc(BudgetManagerTest::test5),

                new TestCase<String>()
                    .setInput("6\n4\n3\n5\n1\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test6)
            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                    "Your program should create purchases.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 12\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                    "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28",
                "Gildan LT $8.61",
                "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                "Wrangler Men's Stretch Cargo Pant $19.97",
                "LEGO DUPLO Town Farm Animals $10.10",
                "Cinema $8.73",
                "Skate rental $30.00",
                "Sensodyne Pronamel Toothpaste $19.74",
                "Chick-fil-A $10 Gift Card $10.00",
                "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your all purchases list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of all purchases is wrong. Expected:\n" +
                        "Total sum: $214.36\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[] {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your food list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of food list is wrong. Expected:\n" +
                        "Total sum: $90.71\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.util.ArrayList;

    public class BudgetManager {
        private ArrayList<Item> itemsList;
        private double balance;
        private double total;

        public BudgetManager() {
            this.itemsList = new ArrayList<>();
            this.balance = 0.00;
        }

        public void addToBalance(double income) {
            this.balance += income;
            System.out.println("Income was added!\n");
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public void addItem(String item, double price, int type) {
            this.itemsList.add(new Item(item, price, type));
            this.total += price;
        }

        public void showPurchaseList(String category) {
            double catTotal = 0.00;
            System.out.println();
            System.out.println(category + ":");
            if (this.itemsList.size() > 0) {
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(category.toUpperCase()))
                        categoryList.add(item);
                }
                if (categoryList.size() == 0) {
                    System.out.println("Purchase list is empty\n");
                } else {
                    for (Item item : categoryList) {
                        System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                        catTotal += item.getPrice();
                    }
                    System.out.printf("Total sum: $%.2f\n", catTotal);
                }
            } else {
                System.out.println("Purchase list is empty!");
            }
        }

        public void showPurchaseList() {
            System.out.println();
            if (this.itemsList.size() > 0) {
                System.out.println("All:");
                for (Item item : itemsList) {
                    System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                }
                System.out.printf("Total sum: $%.2f\n", this.total);
            } else {
                System.out.println("Purchase list is empty!\n");
            }
        }

        public void showBalance() {
            System.out.printf("\nBalance: $%.2f\n\n", this.balance - this.total);
        }

        public double getBalance() {
            return balance;
        }

        public ArrayList<Item> getItemsList() {
            return itemsList;
        }

        public void sortAllPurchases() {
            if (this.itemsList.size() < 0) {
                System.out.println("Purchase list is empty!");
            } else {
                itemsList.sort(new PriceSorter());
                showPurchaseList();
            }
        }

        public void SortAllTypes() {
            itemsList.sort(new TypeSorter());
            double sum = 0.00;
            String[] types = {"Food", "Entertainment", "Clothes", "Other"};
            for (String type : types) {
                sum = 0.00;
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(type.toUpperCase()))
                        categoryList.add(item);
                }
                if (categoryList.size() > 0) {
                    for (Item item : categoryList) {
                        sum += item.getPrice();
                    }
                }
                if (sum == 0.00) {
                    System.out.printf("%s - $0\n", type);
                } else {
                    System.out.printf("%s - $%.2f\n", type, sum);
                }
            }
            if (sum == 0.00) {
                System.out.println("Total sum: $0\n");
            } else {
                System.out.printf("Total sum: $%.2f\n", this.total);
            }
        }


        public void sortType(int type) {
            if (this.itemsList.size() == 0) {
                System.out.println("\nPurchase list is empty!\n");
            } else {

                String category = convertCategory(type);
                double sum = 0.00;
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(category.toUpperCase()))
                        categoryList.add(item);
                }
                System.out.println();
                if (categoryList.size() > 0) {
                    categoryList.sort(new PriceSorter());
                    for (Item item : categoryList) {
                        System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                        sum += item.getPrice();
                    }
                    System.out.printf("Total sum: $%.2f\n", sum);
                } else {
                    System.out.println("\nPurchase list is empty!\n");
                }
            }
        }

        private String convertCategory(int i) {
            switch (i) {
                case 1:
                    return "FOOD";
                case 2:
                    return "CLOTHES";
                case 3:
                    return "ENTERTAINMENT";
                case 4:
                    return "OTHER";
            }
            return "";
        }

    }
  learner_created: true
- name: src/budget/PurchaseCategory.java
  visible: true
  text: |
    package budget;

    public enum PurchaseCategory {
        FOOD, CLOTHES, ENTERTAINMENT, OTHER
    }
  learner_created: true
- name: src/budget/PriceSorter.java
  visible: true
  text: |
    package budget;

    import java.util.Comparator;

    public class PriceSorter implements Comparator<Item> {
        @Override
        public int compare(Item o1, Item o2) {
            return Double.compare(o2.getPrice(), o1.getPrice());
        }
    }
  learner_created: true
- name: src/budget/FileManager.java
  visible: true
  text: |
    package budget;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class FileManager {
        File file = new File("purchases.txt");

        public FileManager() {
            super();
            try {
                this.file.createNewFile();
            } catch (IOException e) {
                System.out.println("Cannot create the file: " + this.file.getPath());
            }
        }

        public File getFile() {
            return file;
        }

        public void saveFile(BudgetManager budgetManager) {
            Double balance = budgetManager.getBalance();

            ArrayList<Item> items = budgetManager.getItemsList();
            try (PrintWriter printWriter = new PrintWriter(file)) {
                printWriter.printf("Balance:%.2f\n", balance);
                for (Item item : items) {
                    int category = convertCategory(item.getCategory().toString());
                    printWriter.printf("%s,%s,%.2f\n", category, item.getName(), item.getPrice());
                }
            } catch (IOException e) {
                System.out.printf("An exception occurs %s", e.getMessage());
            }

            System.out.println("\nPurchases were saved!\n");
        }

        public void loadFile(BudgetManager budgetManager) {
            try (Scanner scanner = new Scanner(file)) {
                String balance = scanner.nextLine();
                if (balance.contains("Balance")) {
                    budgetManager.setBalance(Double.parseDouble(balance.split(":")[1]));
                }
                while (scanner.hasNext()) {
                    String line = scanner.nextLine();
                    String[] arr = line.split(",");
                    int type = Integer.parseInt(arr[0]);
                    String item = arr[1];
                    Double price = Double.parseDouble(arr[2]);

                    budgetManager.addItem(item, price, type);
                }
            } catch (FileNotFoundException e) {
                System.out.println("No file found: " + this.file);
            }

            System.out.println("\nPurchases were loaded!\n");
        }

        private int convertCategory(String c) {
            switch (c) {
                case "FOOD":
                    return 1;
                case "CLOTHES":
                    return 2;
                case "ENTERTAINMENT":
                    return 3;
                case "OTHER":
                    return 4;
            }
            return 0;
        }
    }
  learner_created: true
- name: src/budget/TypeSorter.java
  visible: true
  text: |
    package budget;

    import java.util.Comparator;

    public class TypeSorter implements Comparator<Item> {
        @Override
        public int compare(Item o1, Item o2) {
            return o2.getCategory().compareTo(o1.getCategory());
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  learner_created: true
- name: src/budget/Item.java
  visible: true
  text: |
    package budget;

    public class Item {
        private String name;
        private double price;
        private PurchaseCategory category;

        public Item(String name, double price, int type) {
            this.name = name;
            this.price = price;

            switch (type) {
                case 1:
                    this.category = PurchaseCategory.FOOD;
                    break;
                case 2:
                    this.category = PurchaseCategory.CLOTHES;
                    break;
                case 3:
                    this.category = PurchaseCategory.ENTERTAINMENT;
                    break;
                case 4:
                    this.category = PurchaseCategory.OTHER;
                    break;
                default:
                    break;
            }
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        public PurchaseCategory getCategory() {
            return category;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7027#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 24 Jan 2022 22:51:19 UTC
record: 4
