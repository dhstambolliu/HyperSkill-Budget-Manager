type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.util.ArrayList;

    public class BudgetManager {
        private ArrayList<Item> itemsList;
        private double balance;
        private double total;

        public BudgetManager() {
            this.itemsList = new ArrayList<>();
            this.balance = 0.00;
        }

        public void addToBalance(double income) {
            this.balance += income;
            System.out.println("Income was added!\n");
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public void addItem(String item, double price, int type) {
            this.itemsList.add(new Item(item, price, type));
            this.total += price;
        }

        public void showPurchaseList(String category) {
            double catTotal = 0.00;
            System.out.println();
            System.out.println(category + ":");
            if (this.itemsList.size() > 0) {
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(category.toUpperCase()))
                        categoryList.add(item);
                }
                if (categoryList.size() == 0) {
                    System.out.println("Purchase list is empty\n");
                } else {
                    for (Item item : categoryList) {
                        System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                        catTotal += item.getPrice();
                    }
                    System.out.printf("Total sum: $%.2f\n", catTotal);
                }
            } else {
                System.out.println("Purchase list is empty!");
            }
        }

        public void showPurchaseList() {
            System.out.println();
            if (this.itemsList.size() > 0) {
                System.out.println("All:");
                for (Item item : itemsList) {
                    System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                }
                System.out.printf("Total sum: $%.2f\n", this.total);
            } else {
                System.out.println("Purchase list is empty!\n");
            }
        }

        public void showBalance() {
            System.out.printf("\nBalance: $%.2f\n\n", this.balance - this.total);
        }

        public double getBalance() {
            return balance;
        }

        public ArrayList<Item> getItemsList() {
            return itemsList;
        }

        public void sortAllPurchases() {
            if (this.itemsList.size() < 0) {
                System.out.println("Purchase list is empty!");
            } else {
                itemsList.sort(new PriceSorter());
                showPurchaseList();
            }
        }

        public void SortAllTypes() {
            itemsList.sort(new TypeSorter());
            double sum = 0.00;
            String[] types = {"Food", "Entertainment", "Clothes", "Other"};
            for (String type : types) {
                sum = 0.00;
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(type.toUpperCase()))
                        categoryList.add(item);
                }
                if (categoryList.size() > 0) {
                    for (Item item : categoryList) {
                        sum += item.getPrice();
                    }
                }
                if (sum == 0.00) {
                    System.out.printf("%s - $0\n", type);
                } else {
                    System.out.printf("%s - $%.2f\n", type, sum);
                }
            }
            if (sum == 0.00) {
                System.out.println("Total sum: $0\n");
            } else {
                System.out.printf("Total sum: $%.2f\n", this.total);
            }
        }


        public void sortType(int type) {
            if (this.itemsList.size() == 0) {
                System.out.println("\nPurchase list is empty!\n");
            } else {

                String category = convertCategory(type);
                double sum = 0.00;
                ArrayList<Item> categoryList = new ArrayList<Item>();
                for (Item item : itemsList) {
                    if (item.getCategory() == PurchaseCategory.valueOf(category.toUpperCase()))
                        categoryList.add(item);
                }
                System.out.println();
                if (categoryList.size() > 0) {
                    categoryList.sort(new PriceSorter());
                    for (Item item : categoryList) {
                        System.out.printf("%s $%.2f\n", item.getName(), item.getPrice());
                        sum += item.getPrice();
                    }
                    System.out.printf("Total sum: $%.2f\n", sum);
                } else {
                    System.out.println("\nPurchase list is empty!\n");
                }
            }
        }

        private String convertCategory(int i) {
            switch (i) {
                case 1:
                    return "FOOD";
                case 2:
                    return "CLOTHES";
                case 3:
                    return "ENTERTAINMENT";
                case 4:
                    return "OTHER";
            }
            return "";
        }

    }
  learner_created: true
- name: src/budget/PurchaseCategory.java
  visible: true
  text: |
    package budget;

    public enum PurchaseCategory {
        FOOD, CLOTHES, ENTERTAINMENT, OTHER
    }
  learner_created: true
- name: src/budget/PriceSorter.java
  visible: true
  text: |
    package budget;

    import java.util.Comparator;

    public class PriceSorter implements Comparator<Item> {
        @Override
        public int compare(Item o1, Item o2) {
            return Double.compare(o2.getPrice(), o1.getPrice());
        }
    }
  learner_created: true
- name: src/budget/FileManager.java
  visible: true
  text: |
    package budget;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class FileManager {
        File file = new File("purchases.txt");

        public FileManager() {
            super();
            try {
                this.file.createNewFile();
            } catch (IOException e) {
                System.out.println("Cannot create the file: " + this.file.getPath());
            }
        }

        public File getFile() {
            return file;
        }

        public void saveFile(BudgetManager budgetManager) {
            Double balance = budgetManager.getBalance();

            ArrayList<Item> items = budgetManager.getItemsList();
            try (PrintWriter printWriter = new PrintWriter(file)) {
                printWriter.printf("Balance:%.2f\n", balance);
                for (Item item : items) {
                    int category = convertCategory(item.getCategory().toString());
                    printWriter.printf("%s,%s,%.2f\n", category, item.getName(), item.getPrice());
                }
            } catch (IOException e) {
                System.out.printf("An exception occurs %s", e.getMessage());
            }

            System.out.println("\nPurchases were saved!\n");
        }

        public void loadFile(BudgetManager budgetManager) {
            try (Scanner scanner = new Scanner(file)) {
                String balance = scanner.nextLine();
                if (balance.contains("Balance")) {
                    budgetManager.setBalance(Double.parseDouble(balance.split(":")[1]));
                }
                while (scanner.hasNext()) {
                    String line = scanner.nextLine();
                    String[] arr = line.split(",");
                    int type = Integer.parseInt(arr[0]);
                    String item = arr[1];
                    Double price = Double.parseDouble(arr[2]);

                    budgetManager.addItem(item, price, type);
                }
            } catch (FileNotFoundException e) {
                System.out.println("No file found: " + this.file);
            }

            System.out.println("\nPurchases were loaded!\n");
        }

        private int convertCategory(String c) {
            switch (c) {
                case "FOOD":
                    return 1;
                case "CLOTHES":
                    return 2;
                case "ENTERTAINMENT":
                    return 3;
                case "OTHER":
                    return 4;
            }
            return 0;
        }
    }
  learner_created: true
- name: src/budget/TypeSorter.java
  visible: true
  text: |
    package budget;

    import java.util.Comparator;

    public class TypeSorter implements Comparator<Item> {
        @Override
        public int compare(Item o1, Item o2) {
            return o2.getCategory().compareTo(o1.getCategory());
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: |
    Balance:1000.00
    1,Almond 250g,35.43
    1,Milk,3.50
    1,Red Fuji Apple,5.99
    1,Eggs,3.99
    1,FIJI Natural Artesian Water,25.98
    1,Hershey's milk chocolate bars,8.54
    1,Great Value Broccoli Florets,1.00
    1,Keystone Ground Bee,6.28
    2,Gildan LT,8.61
    2,Men's Dual Defense Crew Socks 12 Pairs,13.00
    2,Wrangler Men's Stretch Cargo Pant,19.97
    3,LEGO DUPLO Town Farm Animals,10.10
    3,Cinema,8.73
    3,Skate rental,30.00
    4,Sensodyne Pronamel Toothpaste,19.74
    4,Chick-fil-A $10 Gift Card,10.00
    4,Debt,3.50
  learner_created: true
- name: src/budget/Item.java
  visible: true
  text: |
    package budget;

    public class Item {
        private String name;
        private double price;
        private PurchaseCategory category;

        public Item(String name, double price, int type) {
            this.name = name;
            this.price = price;

            switch (type) {
                case 1:
                    this.category = PurchaseCategory.FOOD;
                    break;
                case 2:
                    this.category = PurchaseCategory.CLOTHES;
                    break;
                case 3:
                    this.category = PurchaseCategory.ENTERTAINMENT;
                    break;
                case 4:
                    this.category = PurchaseCategory.OTHER;
                    break;
                default:
                    break;
            }
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        public PurchaseCategory getCategory() {
            return category;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 24 Jan 2022 22:51:48 UTC
record: -1
